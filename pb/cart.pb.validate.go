// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/cart.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _cart_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Empty) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// EmptyValidationError is the validation error returned by Empty.Validate if
// the designated constraints aren't met.
type EmptyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyValidationError) ErrorName() string { return "EmptyValidationError" }

// Error satisfies the builtin error interface
func (e EmptyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmpty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyValidationError{}

// Validate checks the field values on HealthMessage with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *HealthMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Message

	return nil
}

// HealthMessageValidationError is the validation error returned by
// HealthMessage.Validate if the designated constraints aren't met.
type HealthMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthMessageValidationError) ErrorName() string { return "HealthMessageValidationError" }

// Error satisfies the builtin error interface
func (e HealthMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthMessageValidationError{}

// Validate checks the field values on StatusMessage with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StatusMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ok

	// no validation rules for Code

	// no validation rules for Message

	return nil
}

// StatusMessageValidationError is the validation error returned by
// StatusMessage.Validate if the designated constraints aren't met.
type StatusMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusMessageValidationError) ErrorName() string { return "StatusMessageValidationError" }

// Error satisfies the builtin error interface
func (e StatusMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusMessageValidationError{}

// Validate checks the field values on Cart with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Cart) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CartValidationError is the validation error returned by Cart.Validate if the
// designated constraints aren't met.
type CartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartValidationError) ErrorName() string { return "CartValidationError" }

// Error satisfies the builtin error interface
func (e CartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartValidationError{}

// Validate checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Product) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Price

	return nil
}

// ProductValidationError is the validation error returned by Product.Validate
// if the designated constraints aren't met.
type ProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductValidationError) ErrorName() string { return "ProductValidationError" }

// Error satisfies the builtin error interface
func (e ProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductValidationError{}

// Validate checks the field values on ProductItem with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProductItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProduct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductItemValidationError{
				field:  "Product",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Quantity

	// no validation rules for Amount

	return nil
}

// ProductItemValidationError is the validation error returned by
// ProductItem.Validate if the designated constraints aren't met.
type ProductItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductItemValidationError) ErrorName() string { return "ProductItemValidationError" }

// Error satisfies the builtin error interface
func (e ProductItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductItemValidationError{}

// Validate checks the field values on AddRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AddRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddRequestValidationError{
				field:  "Cart",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProduct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddRequestValidationError{
				field:  "Product",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Quantity

	return nil
}

// AddRequestValidationError is the validation error returned by
// AddRequest.Validate if the designated constraints aren't met.
type AddRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRequestValidationError) ErrorName() string { return "AddRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRequestValidationError{}

// Validate checks the field values on DeleteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DeleteRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CartId

	// no validation rules for ProductId

	// no validation rules for Quantity

	return nil
}

// DeleteRequestValidationError is the validation error returned by
// DeleteRequest.Validate if the designated constraints aren't met.
type DeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestValidationError) ErrorName() string { return "DeleteRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestValidationError{}

// Validate checks the field values on GetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetResponseValidationError{
				field:  "Cart",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetResponseValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Quantity

	// no validation rules for Amount

	return nil
}

// GetResponseValidationError is the validation error returned by
// GetResponse.Validate if the designated constraints aren't met.
type GetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResponseValidationError) ErrorName() string { return "GetResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResponseValidationError{}
